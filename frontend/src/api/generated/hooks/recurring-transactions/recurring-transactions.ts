/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  RecurringTransactionRequest,
  RecurringTransactionResponse,
  UpdateRecurringStatusRequest,
} from "../openAPIDefinition.schemas";

import { apiClient } from "../../../api-client";

export const getRecurringTransactionById = (
  id: string,
  signal?: AbortSignal,
) => {
  return apiClient<RecurringTransactionResponse>({
    url: `/recurring-transactions/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetRecurringTransactionByIdQueryKey = (id: string) => {
  return [`/recurring-transactions/${id}`] as const;
};

export const getGetRecurringTransactionByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getRecurringTransactionById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRecurringTransactionById>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetRecurringTransactionByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRecurringTransactionById>>
  > = ({ signal }) => getRecurringTransactionById(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRecurringTransactionById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRecurringTransactionByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRecurringTransactionById>>
>;
export type GetRecurringTransactionByIdQueryError = unknown;

export function useGetRecurringTransactionById<
  TData = Awaited<ReturnType<typeof getRecurringTransactionById>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRecurringTransactionById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRecurringTransactionById>>,
          TError,
          Awaited<ReturnType<typeof getRecurringTransactionById>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRecurringTransactionById<
  TData = Awaited<ReturnType<typeof getRecurringTransactionById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRecurringTransactionById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRecurringTransactionById>>,
          TError,
          Awaited<ReturnType<typeof getRecurringTransactionById>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRecurringTransactionById<
  TData = Awaited<ReturnType<typeof getRecurringTransactionById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRecurringTransactionById>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetRecurringTransactionById<
  TData = Awaited<ReturnType<typeof getRecurringTransactionById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRecurringTransactionById>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetRecurringTransactionByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateRecurringTransaction = (
  id: string,
  recurringTransactionRequest: RecurringTransactionRequest,
) => {
  return apiClient<RecurringTransactionResponse>({
    url: `/recurring-transactions/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: recurringTransactionRequest,
  });
};

export const getUpdateRecurringTransactionMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateRecurringTransaction>>,
    TError,
    { id: string; data: RecurringTransactionRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateRecurringTransaction>>,
  TError,
  { id: string; data: RecurringTransactionRequest },
  TContext
> => {
  const mutationKey = ["updateRecurringTransaction"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateRecurringTransaction>>,
    { id: string; data: RecurringTransactionRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateRecurringTransaction(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateRecurringTransactionMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateRecurringTransaction>>
>;
export type UpdateRecurringTransactionMutationBody =
  RecurringTransactionRequest;
export type UpdateRecurringTransactionMutationError = unknown;

export const useUpdateRecurringTransaction = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateRecurringTransaction>>,
      TError,
      { id: string; data: RecurringTransactionRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateRecurringTransaction>>,
  TError,
  { id: string; data: RecurringTransactionRequest },
  TContext
> => {
  const mutationOptions = getUpdateRecurringTransactionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteRecurringTransaction = (id: string) => {
  return apiClient<void>({
    url: `/recurring-transactions/${id}`,
    method: "DELETE",
  });
};

export const getDeleteRecurringTransactionMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRecurringTransaction>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteRecurringTransaction>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteRecurringTransaction"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteRecurringTransaction>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteRecurringTransaction(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteRecurringTransactionMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteRecurringTransaction>>
>;

export type DeleteRecurringTransactionMutationError = unknown;

export const useDeleteRecurringTransaction = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteRecurringTransaction>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteRecurringTransaction>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteRecurringTransactionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getAllUserRecurringTransactions = (signal?: AbortSignal) => {
  return apiClient<RecurringTransactionResponse[]>({
    url: `/recurring-transactions`,
    method: "GET",
    signal,
  });
};

export const getGetAllUserRecurringTransactionsQueryKey = () => {
  return [`/recurring-transactions`] as const;
};

export const getGetAllUserRecurringTransactionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllUserRecurringTransactions>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getAllUserRecurringTransactions>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAllUserRecurringTransactionsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAllUserRecurringTransactions>>
  > = ({ signal }) => getAllUserRecurringTransactions(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllUserRecurringTransactions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllUserRecurringTransactionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllUserRecurringTransactions>>
>;
export type GetAllUserRecurringTransactionsQueryError = unknown;

export function useGetAllUserRecurringTransactions<
  TData = Awaited<ReturnType<typeof getAllUserRecurringTransactions>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllUserRecurringTransactions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllUserRecurringTransactions>>,
          TError,
          Awaited<ReturnType<typeof getAllUserRecurringTransactions>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllUserRecurringTransactions<
  TData = Awaited<ReturnType<typeof getAllUserRecurringTransactions>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllUserRecurringTransactions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllUserRecurringTransactions>>,
          TError,
          Awaited<ReturnType<typeof getAllUserRecurringTransactions>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllUserRecurringTransactions<
  TData = Awaited<ReturnType<typeof getAllUserRecurringTransactions>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllUserRecurringTransactions>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetAllUserRecurringTransactions<
  TData = Awaited<ReturnType<typeof getAllUserRecurringTransactions>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllUserRecurringTransactions>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAllUserRecurringTransactionsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createRecurringTransaction = (
  recurringTransactionRequest: RecurringTransactionRequest,
  signal?: AbortSignal,
) => {
  return apiClient<RecurringTransactionResponse>({
    url: `/recurring-transactions`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: recurringTransactionRequest,
    signal,
  });
};

export const getCreateRecurringTransactionMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createRecurringTransaction>>,
    TError,
    { data: RecurringTransactionRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createRecurringTransaction>>,
  TError,
  { data: RecurringTransactionRequest },
  TContext
> => {
  const mutationKey = ["createRecurringTransaction"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createRecurringTransaction>>,
    { data: RecurringTransactionRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createRecurringTransaction(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateRecurringTransactionMutationResult = NonNullable<
  Awaited<ReturnType<typeof createRecurringTransaction>>
>;
export type CreateRecurringTransactionMutationBody =
  RecurringTransactionRequest;
export type CreateRecurringTransactionMutationError = unknown;

export const useCreateRecurringTransaction = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createRecurringTransaction>>,
      TError,
      { data: RecurringTransactionRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createRecurringTransaction>>,
  TError,
  { data: RecurringTransactionRequest },
  TContext
> => {
  const mutationOptions = getCreateRecurringTransactionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const updateStatus = (
  id: string,
  updateRecurringStatusRequest: UpdateRecurringStatusRequest,
) => {
  return apiClient<RecurringTransactionResponse>({
    url: `/recurring-transactions/${id}/status`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: updateRecurringStatusRequest,
  });
};

export const getUpdateStatusMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateStatus>>,
    TError,
    { id: string; data: UpdateRecurringStatusRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateStatus>>,
  TError,
  { id: string; data: UpdateRecurringStatusRequest },
  TContext
> => {
  const mutationKey = ["updateStatus"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateStatus>>,
    { id: string; data: UpdateRecurringStatusRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateStatus(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateStatusMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateStatus>>
>;
export type UpdateStatusMutationBody = UpdateRecurringStatusRequest;
export type UpdateStatusMutationError = unknown;

export const useUpdateStatus = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateStatus>>,
      TError,
      { id: string; data: UpdateRecurringStatusRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateStatus>>,
  TError,
  { id: string; data: UpdateRecurringStatusRequest },
  TContext
> => {
  const mutationOptions = getUpdateStatusMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
