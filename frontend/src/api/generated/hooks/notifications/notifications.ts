/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { NotificationResponse } from "../openAPIDefinition.schemas";

import { apiClient } from "../../../api-client";

export const markAsRead = (id: string, signal?: AbortSignal) => {
  return apiClient<void>({
    url: `/notifications/${id}/read`,
    method: "POST",
    signal,
  });
};

export const getMarkAsReadMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof markAsRead>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof markAsRead>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["markAsRead"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof markAsRead>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return markAsRead(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type MarkAsReadMutationResult = NonNullable<
  Awaited<ReturnType<typeof markAsRead>>
>;

export type MarkAsReadMutationError = unknown;

export const useMarkAsRead = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof markAsRead>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof markAsRead>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getMarkAsReadMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const markAllAsRead = (signal?: AbortSignal) => {
  return apiClient<void>({
    url: `/notifications/read-all`,
    method: "POST",
    signal,
  });
};

export const getMarkAllAsReadMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof markAllAsRead>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof markAllAsRead>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["markAllAsRead"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof markAllAsRead>>,
    void
  > = () => {
    return markAllAsRead();
  };

  return { mutationFn, ...mutationOptions };
};

export type MarkAllAsReadMutationResult = NonNullable<
  Awaited<ReturnType<typeof markAllAsRead>>
>;

export type MarkAllAsReadMutationError = unknown;

export const useMarkAllAsRead = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof markAllAsRead>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof markAllAsRead>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getMarkAllAsReadMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getMyNotifications = (signal?: AbortSignal) => {
  return apiClient<NotificationResponse[]>({
    url: `/notifications`,
    method: "GET",
    signal,
  });
};

export const getGetMyNotificationsQueryKey = () => {
  return [`/notifications`] as const;
};

export const getGetMyNotificationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getMyNotifications>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getMyNotifications>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMyNotificationsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMyNotifications>>
  > = ({ signal }) => getMyNotifications(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMyNotifications>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMyNotificationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMyNotifications>>
>;
export type GetMyNotificationsQueryError = unknown;

export function useGetMyNotifications<
  TData = Awaited<ReturnType<typeof getMyNotifications>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyNotifications>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyNotifications>>,
          TError,
          Awaited<ReturnType<typeof getMyNotifications>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMyNotifications<
  TData = Awaited<ReturnType<typeof getMyNotifications>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyNotifications>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyNotifications>>,
          TError,
          Awaited<ReturnType<typeof getMyNotifications>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMyNotifications<
  TData = Awaited<ReturnType<typeof getMyNotifications>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyNotifications>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetMyNotifications<
  TData = Awaited<ReturnType<typeof getMyNotifications>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyNotifications>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMyNotificationsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
