/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type {
  AuthenticationRequest,
  AuthenticationResponse,
  RegisterRequest,
  ResendVerificationRequest,
  VerificationRequest,
} from "../openAPIDefinition.schemas";

import { apiClient } from "../../../api-client";

export const verifyAccount = (
  verificationRequest: VerificationRequest,
  signal?: AbortSignal,
) => {
  return apiClient<AuthenticationResponse>({
    url: `/auth/verify`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: verificationRequest,
    signal,
  });
};

export const getVerifyAccountMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof verifyAccount>>,
    TError,
    { data: VerificationRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof verifyAccount>>,
  TError,
  { data: VerificationRequest },
  TContext
> => {
  const mutationKey = ["verifyAccount"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof verifyAccount>>,
    { data: VerificationRequest }
  > = (props) => {
    const { data } = props ?? {};

    return verifyAccount(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type VerifyAccountMutationResult = NonNullable<
  Awaited<ReturnType<typeof verifyAccount>>
>;
export type VerifyAccountMutationBody = VerificationRequest;
export type VerifyAccountMutationError = unknown;

export const useVerifyAccount = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof verifyAccount>>,
      TError,
      { data: VerificationRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof verifyAccount>>,
  TError,
  { data: VerificationRequest },
  TContext
> => {
  const mutationOptions = getVerifyAccountMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const resendVerification = (
  resendVerificationRequest: ResendVerificationRequest,
  signal?: AbortSignal,
) => {
  return apiClient<void>({
    url: `/auth/resend-verification`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: resendVerificationRequest,
    signal,
  });
};

export const getResendVerificationMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resendVerification>>,
    TError,
    { data: ResendVerificationRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof resendVerification>>,
  TError,
  { data: ResendVerificationRequest },
  TContext
> => {
  const mutationKey = ["resendVerification"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof resendVerification>>,
    { data: ResendVerificationRequest }
  > = (props) => {
    const { data } = props ?? {};

    return resendVerification(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ResendVerificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof resendVerification>>
>;
export type ResendVerificationMutationBody = ResendVerificationRequest;
export type ResendVerificationMutationError = unknown;

export const useResendVerification = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof resendVerification>>,
      TError,
      { data: ResendVerificationRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof resendVerification>>,
  TError,
  { data: ResendVerificationRequest },
  TContext
> => {
  const mutationOptions = getResendVerificationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const register = (
  registerRequest: RegisterRequest,
  signal?: AbortSignal,
) => {
  return apiClient<AuthenticationResponse>({
    url: `/auth/register`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: registerRequest,
    signal,
  });
};

export const getRegisterMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof register>>,
    TError,
    { data: RegisterRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof register>>,
  TError,
  { data: RegisterRequest },
  TContext
> => {
  const mutationKey = ["register"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof register>>,
    { data: RegisterRequest }
  > = (props) => {
    const { data } = props ?? {};

    return register(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type RegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof register>>
>;
export type RegisterMutationBody = RegisterRequest;
export type RegisterMutationError = unknown;

export const useRegister = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof register>>,
      TError,
      { data: RegisterRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof register>>,
  TError,
  { data: RegisterRequest },
  TContext
> => {
  const mutationOptions = getRegisterMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const refreshToken = (signal?: AbortSignal) => {
  return apiClient<AuthenticationResponse>({
    url: `/auth/refresh`,
    method: "POST",
    signal,
  });
};

export const getRefreshTokenMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof refreshToken>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof refreshToken>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["refreshToken"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof refreshToken>>,
    void
  > = () => {
    return refreshToken();
  };

  return { mutationFn, ...mutationOptions };
};

export type RefreshTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof refreshToken>>
>;

export type RefreshTokenMutationError = unknown;

export const useRefreshToken = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof refreshToken>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof refreshToken>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getRefreshTokenMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const logout = (signal?: AbortSignal) => {
  return apiClient<void>({ url: `/auth/logout`, method: "POST", signal });
};

export const getLogoutMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof logout>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof logout>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["logout"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof logout>>,
    void
  > = () => {
    return logout();
  };

  return { mutationFn, ...mutationOptions };
};

export type LogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof logout>>
>;

export type LogoutMutationError = unknown;

export const useLogout = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof logout>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof logout>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getLogoutMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const login = (
  authenticationRequest: AuthenticationRequest,
  signal?: AbortSignal,
) => {
  return apiClient<AuthenticationResponse>({
    url: `/auth/login`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: authenticationRequest,
    signal,
  });
};

export const getLoginMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof login>>,
    TError,
    { data: AuthenticationRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: AuthenticationRequest },
  TContext
> => {
  const mutationKey = ["login"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof login>>,
    { data: AuthenticationRequest }
  > = (props) => {
    const { data } = props ?? {};

    return login(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof login>>
>;
export type LoginMutationBody = AuthenticationRequest;
export type LoginMutationError = unknown;

export const useLogin = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof login>>,
      TError,
      { data: AuthenticationRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: AuthenticationRequest },
  TContext
> => {
  const mutationOptions = getLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
