/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  BudgetRequest,
  BudgetResponse,
  GetBudgetsParams,
} from "../openAPIDefinition.schemas";

import { apiClient } from "../../../api-client";

export const getBudgetById = (id: string, signal?: AbortSignal) => {
  return apiClient<BudgetResponse>({
    url: `/budgets/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetBudgetByIdQueryKey = (id: string) => {
  return [`/budgets/${id}`] as const;
};

export const getGetBudgetByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getBudgetById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBudgetById>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetBudgetByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getBudgetById>>> = ({
    signal,
  }) => getBudgetById(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getBudgetById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetBudgetByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getBudgetById>>
>;
export type GetBudgetByIdQueryError = unknown;

export function useGetBudgetById<
  TData = Awaited<ReturnType<typeof getBudgetById>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBudgetById>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBudgetById>>,
          TError,
          Awaited<ReturnType<typeof getBudgetById>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBudgetById<
  TData = Awaited<ReturnType<typeof getBudgetById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBudgetById>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBudgetById>>,
          TError,
          Awaited<ReturnType<typeof getBudgetById>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBudgetById<
  TData = Awaited<ReturnType<typeof getBudgetById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBudgetById>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetBudgetById<
  TData = Awaited<ReturnType<typeof getBudgetById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBudgetById>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetBudgetByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateBudget = (id: string, budgetRequest: BudgetRequest) => {
  return apiClient<BudgetResponse>({
    url: `/budgets/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: budgetRequest,
  });
};

export const getUpdateBudgetMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateBudget>>,
    TError,
    { id: string; data: BudgetRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateBudget>>,
  TError,
  { id: string; data: BudgetRequest },
  TContext
> => {
  const mutationKey = ["updateBudget"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateBudget>>,
    { id: string; data: BudgetRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateBudget(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateBudgetMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateBudget>>
>;
export type UpdateBudgetMutationBody = BudgetRequest;
export type UpdateBudgetMutationError = unknown;

export const useUpdateBudget = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateBudget>>,
      TError,
      { id: string; data: BudgetRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateBudget>>,
  TError,
  { id: string; data: BudgetRequest },
  TContext
> => {
  const mutationOptions = getUpdateBudgetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteBudget = (id: string) => {
  return apiClient<void>({ url: `/budgets/${id}`, method: "DELETE" });
};

export const getDeleteBudgetMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteBudget>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteBudget>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteBudget"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteBudget>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteBudget(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteBudgetMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteBudget>>
>;

export type DeleteBudgetMutationError = unknown;

export const useDeleteBudget = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteBudget>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteBudget>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteBudgetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getBudgets = (params?: GetBudgetsParams, signal?: AbortSignal) => {
  return apiClient<BudgetResponse[]>({
    url: `/budgets`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetBudgetsQueryKey = (params?: GetBudgetsParams) => {
  return [`/budgets`, ...(params ? [params] : [])] as const;
};

export const getGetBudgetsQueryOptions = <
  TData = Awaited<ReturnType<typeof getBudgets>>,
  TError = unknown,
>(
  params?: GetBudgetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBudgets>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetBudgetsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getBudgets>>> = ({
    signal,
  }) => getBudgets(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getBudgets>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetBudgetsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getBudgets>>
>;
export type GetBudgetsQueryError = unknown;

export function useGetBudgets<
  TData = Awaited<ReturnType<typeof getBudgets>>,
  TError = unknown,
>(
  params: undefined | GetBudgetsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBudgets>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBudgets>>,
          TError,
          Awaited<ReturnType<typeof getBudgets>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBudgets<
  TData = Awaited<ReturnType<typeof getBudgets>>,
  TError = unknown,
>(
  params?: GetBudgetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBudgets>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBudgets>>,
          TError,
          Awaited<ReturnType<typeof getBudgets>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetBudgets<
  TData = Awaited<ReturnType<typeof getBudgets>>,
  TError = unknown,
>(
  params?: GetBudgetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBudgets>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetBudgets<
  TData = Awaited<ReturnType<typeof getBudgets>>,
  TError = unknown,
>(
  params?: GetBudgetsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getBudgets>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetBudgetsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createBudget = (
  budgetRequest: BudgetRequest,
  signal?: AbortSignal,
) => {
  return apiClient<BudgetResponse>({
    url: `/budgets`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: budgetRequest,
    signal,
  });
};

export const getCreateBudgetMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createBudget>>,
    TError,
    { data: BudgetRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createBudget>>,
  TError,
  { data: BudgetRequest },
  TContext
> => {
  const mutationKey = ["createBudget"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createBudget>>,
    { data: BudgetRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createBudget(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateBudgetMutationResult = NonNullable<
  Awaited<ReturnType<typeof createBudget>>
>;
export type CreateBudgetMutationBody = BudgetRequest;
export type CreateBudgetMutationError = unknown;

export const useCreateBudget = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createBudget>>,
      TError,
      { data: BudgetRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createBudget>>,
  TError,
  { data: BudgetRequest },
  TContext
> => {
  const mutationOptions = getCreateBudgetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
