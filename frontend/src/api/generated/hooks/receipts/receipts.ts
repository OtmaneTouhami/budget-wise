/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ReceiptResponse,
  UploadReceiptBody,
} from "../openAPIDefinition.schemas";

import { apiClient } from "../../../api-client";

export const getReceiptsForTransaction = (
  transactionId: string,
  signal?: AbortSignal,
) => {
  return apiClient<ReceiptResponse[]>({
    url: `/transactions/${transactionId}/receipts`,
    method: "GET",
    signal,
  });
};

export const getGetReceiptsForTransactionQueryKey = (transactionId: string) => {
  return [`/transactions/${transactionId}/receipts`] as const;
};

export const getGetReceiptsForTransactionQueryOptions = <
  TData = Awaited<ReturnType<typeof getReceiptsForTransaction>>,
  TError = unknown,
>(
  transactionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReceiptsForTransaction>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetReceiptsForTransactionQueryKey(transactionId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getReceiptsForTransaction>>
  > = ({ signal }) => getReceiptsForTransaction(transactionId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!transactionId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getReceiptsForTransaction>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetReceiptsForTransactionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getReceiptsForTransaction>>
>;
export type GetReceiptsForTransactionQueryError = unknown;

export function useGetReceiptsForTransaction<
  TData = Awaited<ReturnType<typeof getReceiptsForTransaction>>,
  TError = unknown,
>(
  transactionId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReceiptsForTransaction>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReceiptsForTransaction>>,
          TError,
          Awaited<ReturnType<typeof getReceiptsForTransaction>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetReceiptsForTransaction<
  TData = Awaited<ReturnType<typeof getReceiptsForTransaction>>,
  TError = unknown,
>(
  transactionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReceiptsForTransaction>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReceiptsForTransaction>>,
          TError,
          Awaited<ReturnType<typeof getReceiptsForTransaction>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetReceiptsForTransaction<
  TData = Awaited<ReturnType<typeof getReceiptsForTransaction>>,
  TError = unknown,
>(
  transactionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReceiptsForTransaction>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetReceiptsForTransaction<
  TData = Awaited<ReturnType<typeof getReceiptsForTransaction>>,
  TError = unknown,
>(
  transactionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReceiptsForTransaction>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetReceiptsForTransactionQueryOptions(
    transactionId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const uploadReceipt = (
  transactionId: string,
  uploadReceiptBody: UploadReceiptBody,
  signal?: AbortSignal,
) => {
  return apiClient<ReceiptResponse>({
    url: `/transactions/${transactionId}/receipts`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: uploadReceiptBody,
    signal,
  });
};

export const getUploadReceiptMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadReceipt>>,
    TError,
    { transactionId: string; data: UploadReceiptBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof uploadReceipt>>,
  TError,
  { transactionId: string; data: UploadReceiptBody },
  TContext
> => {
  const mutationKey = ["uploadReceipt"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof uploadReceipt>>,
    { transactionId: string; data: UploadReceiptBody }
  > = (props) => {
    const { transactionId, data } = props ?? {};

    return uploadReceipt(transactionId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UploadReceiptMutationResult = NonNullable<
  Awaited<ReturnType<typeof uploadReceipt>>
>;
export type UploadReceiptMutationBody = UploadReceiptBody;
export type UploadReceiptMutationError = unknown;

export const useUploadReceipt = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof uploadReceipt>>,
      TError,
      { transactionId: string; data: UploadReceiptBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof uploadReceipt>>,
  TError,
  { transactionId: string; data: UploadReceiptBody },
  TContext
> => {
  const mutationOptions = getUploadReceiptMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteReceipt = (receiptId: string) => {
  return apiClient<void>({ url: `/receipts/${receiptId}`, method: "DELETE" });
};

export const getDeleteReceiptMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteReceipt>>,
    TError,
    { receiptId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteReceipt>>,
  TError,
  { receiptId: string },
  TContext
> => {
  const mutationKey = ["deleteReceipt"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteReceipt>>,
    { receiptId: string }
  > = (props) => {
    const { receiptId } = props ?? {};

    return deleteReceipt(receiptId);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteReceiptMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteReceipt>>
>;

export type DeleteReceiptMutationError = unknown;

export const useDeleteReceipt = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteReceipt>>,
      TError,
      { receiptId: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteReceipt>>,
  TError,
  { receiptId: string },
  TContext
> => {
  const mutationOptions = getDeleteReceiptMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
