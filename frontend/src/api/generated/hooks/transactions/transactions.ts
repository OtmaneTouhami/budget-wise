/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CreateTransactionFromTemplateRequest,
  ExportTransactionsToCsvParams,
  GetTransactionsParams,
  TransactionRequest,
  TransactionResponse,
} from "../openAPIDefinition.schemas";

import { apiClient } from "../../../api-client";

export const getTransactionById = (id: string, signal?: AbortSignal) => {
  return apiClient<TransactionResponse>({
    url: `/transactions/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetTransactionByIdQueryKey = (id: string) => {
  return [`/transactions/${id}`] as const;
};

export const getGetTransactionByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getTransactionById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTransactionById>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTransactionByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTransactionById>>
  > = ({ signal }) => getTransactionById(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getTransactionById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTransactionByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTransactionById>>
>;
export type GetTransactionByIdQueryError = unknown;

export function useGetTransactionById<
  TData = Awaited<ReturnType<typeof getTransactionById>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTransactionById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTransactionById>>,
          TError,
          Awaited<ReturnType<typeof getTransactionById>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTransactionById<
  TData = Awaited<ReturnType<typeof getTransactionById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTransactionById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTransactionById>>,
          TError,
          Awaited<ReturnType<typeof getTransactionById>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTransactionById<
  TData = Awaited<ReturnType<typeof getTransactionById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTransactionById>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetTransactionById<
  TData = Awaited<ReturnType<typeof getTransactionById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTransactionById>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTransactionByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateTransaction = (
  id: string,
  transactionRequest: TransactionRequest,
) => {
  return apiClient<TransactionResponse>({
    url: `/transactions/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: transactionRequest,
  });
};

export const getUpdateTransactionMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTransaction>>,
    TError,
    { id: string; data: TransactionRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTransaction>>,
  TError,
  { id: string; data: TransactionRequest },
  TContext
> => {
  const mutationKey = ["updateTransaction"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTransaction>>,
    { id: string; data: TransactionRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateTransaction(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTransactionMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateTransaction>>
>;
export type UpdateTransactionMutationBody = TransactionRequest;
export type UpdateTransactionMutationError = unknown;

export const useUpdateTransaction = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateTransaction>>,
      TError,
      { id: string; data: TransactionRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateTransaction>>,
  TError,
  { id: string; data: TransactionRequest },
  TContext
> => {
  const mutationOptions = getUpdateTransactionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteTransaction = (id: string) => {
  return apiClient<void>({ url: `/transactions/${id}`, method: "DELETE" });
};

export const getDeleteTransactionMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTransaction>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTransaction>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteTransaction"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTransaction>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteTransaction(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTransactionMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTransaction>>
>;

export type DeleteTransactionMutationError = unknown;

export const useDeleteTransaction = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteTransaction>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteTransaction>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteTransactionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getTransactions = (
  params?: GetTransactionsParams,
  signal?: AbortSignal,
) => {
  return apiClient<TransactionResponse[]>({
    url: `/transactions`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetTransactionsQueryKey = (params?: GetTransactionsParams) => {
  return [`/transactions`, ...(params ? [params] : [])] as const;
};

export const getGetTransactionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getTransactions>>,
  TError = unknown,
>(
  params?: GetTransactionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTransactions>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTransactionsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTransactions>>> = ({
    signal,
  }) => getTransactions(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTransactions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTransactionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTransactions>>
>;
export type GetTransactionsQueryError = unknown;

export function useGetTransactions<
  TData = Awaited<ReturnType<typeof getTransactions>>,
  TError = unknown,
>(
  params: undefined | GetTransactionsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTransactions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTransactions>>,
          TError,
          Awaited<ReturnType<typeof getTransactions>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTransactions<
  TData = Awaited<ReturnType<typeof getTransactions>>,
  TError = unknown,
>(
  params?: GetTransactionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTransactions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTransactions>>,
          TError,
          Awaited<ReturnType<typeof getTransactions>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTransactions<
  TData = Awaited<ReturnType<typeof getTransactions>>,
  TError = unknown,
>(
  params?: GetTransactionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTransactions>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetTransactions<
  TData = Awaited<ReturnType<typeof getTransactions>>,
  TError = unknown,
>(
  params?: GetTransactionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTransactions>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTransactionsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createTransaction = (
  transactionRequest: TransactionRequest,
  signal?: AbortSignal,
) => {
  return apiClient<TransactionResponse>({
    url: `/transactions`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: transactionRequest,
    signal,
  });
};

export const getCreateTransactionMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTransaction>>,
    TError,
    { data: TransactionRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createTransaction>>,
  TError,
  { data: TransactionRequest },
  TContext
> => {
  const mutationKey = ["createTransaction"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTransaction>>,
    { data: TransactionRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createTransaction(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateTransactionMutationResult = NonNullable<
  Awaited<ReturnType<typeof createTransaction>>
>;
export type CreateTransactionMutationBody = TransactionRequest;
export type CreateTransactionMutationError = unknown;

export const useCreateTransaction = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createTransaction>>,
      TError,
      { data: TransactionRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createTransaction>>,
  TError,
  { data: TransactionRequest },
  TContext
> => {
  const mutationOptions = getCreateTransactionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const createTransactionFromTemplate = (
  templateId: string,
  createTransactionFromTemplateRequest: CreateTransactionFromTemplateRequest,
  signal?: AbortSignal,
) => {
  return apiClient<TransactionResponse>({
    url: `/transactions/from-template/${templateId}`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createTransactionFromTemplateRequest,
    signal,
  });
};

export const getCreateTransactionFromTemplateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTransactionFromTemplate>>,
    TError,
    { templateId: string; data: CreateTransactionFromTemplateRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createTransactionFromTemplate>>,
  TError,
  { templateId: string; data: CreateTransactionFromTemplateRequest },
  TContext
> => {
  const mutationKey = ["createTransactionFromTemplate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTransactionFromTemplate>>,
    { templateId: string; data: CreateTransactionFromTemplateRequest }
  > = (props) => {
    const { templateId, data } = props ?? {};

    return createTransactionFromTemplate(templateId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateTransactionFromTemplateMutationResult = NonNullable<
  Awaited<ReturnType<typeof createTransactionFromTemplate>>
>;
export type CreateTransactionFromTemplateMutationBody =
  CreateTransactionFromTemplateRequest;
export type CreateTransactionFromTemplateMutationError = unknown;

export const useCreateTransactionFromTemplate = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createTransactionFromTemplate>>,
      TError,
      { templateId: string; data: CreateTransactionFromTemplateRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createTransactionFromTemplate>>,
  TError,
  { templateId: string; data: CreateTransactionFromTemplateRequest },
  TContext
> => {
  const mutationOptions =
    getCreateTransactionFromTemplateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const exportTransactionsToCsv = (
  params?: ExportTransactionsToCsvParams,
  signal?: AbortSignal,
) => {
  return apiClient<void>({
    url: `/transactions/export`,
    method: "GET",
    params,
    signal,
  });
};

export const getExportTransactionsToCsvQueryKey = (
  params?: ExportTransactionsToCsvParams,
) => {
  return [`/transactions/export`, ...(params ? [params] : [])] as const;
};

export const getExportTransactionsToCsvQueryOptions = <
  TData = Awaited<ReturnType<typeof exportTransactionsToCsv>>,
  TError = unknown,
>(
  params?: ExportTransactionsToCsvParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof exportTransactionsToCsv>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getExportTransactionsToCsvQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof exportTransactionsToCsv>>
  > = ({ signal }) => exportTransactionsToCsv(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof exportTransactionsToCsv>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ExportTransactionsToCsvQueryResult = NonNullable<
  Awaited<ReturnType<typeof exportTransactionsToCsv>>
>;
export type ExportTransactionsToCsvQueryError = unknown;

export function useExportTransactionsToCsv<
  TData = Awaited<ReturnType<typeof exportTransactionsToCsv>>,
  TError = unknown,
>(
  params: undefined | ExportTransactionsToCsvParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof exportTransactionsToCsv>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof exportTransactionsToCsv>>,
          TError,
          Awaited<ReturnType<typeof exportTransactionsToCsv>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useExportTransactionsToCsv<
  TData = Awaited<ReturnType<typeof exportTransactionsToCsv>>,
  TError = unknown,
>(
  params?: ExportTransactionsToCsvParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof exportTransactionsToCsv>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof exportTransactionsToCsv>>,
          TError,
          Awaited<ReturnType<typeof exportTransactionsToCsv>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useExportTransactionsToCsv<
  TData = Awaited<ReturnType<typeof exportTransactionsToCsv>>,
  TError = unknown,
>(
  params?: ExportTransactionsToCsvParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof exportTransactionsToCsv>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useExportTransactionsToCsv<
  TData = Awaited<ReturnType<typeof exportTransactionsToCsv>>,
  TError = unknown,
>(
  params?: ExportTransactionsToCsvParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof exportTransactionsToCsv>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getExportTransactionsToCsvQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
