/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ChangePasswordRequest,
  UpdateProfileRequest,
  UserProfileResponse,
} from "../openAPIDefinition.schemas";

import { apiClient } from "../../../api-client";

export const getUserProfile = (signal?: AbortSignal) => {
  return apiClient<UserProfileResponse>({
    url: `/profile`,
    method: "GET",
    signal,
  });
};

export const getGetUserProfileQueryKey = () => {
  return [`/profile`] as const;
};

export const getGetUserProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserProfile>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserProfileQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserProfile>>> = ({
    signal,
  }) => getUserProfile(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserProfile>>
>;
export type GetUserProfileQueryError = unknown;

export function useGetUserProfile<
  TData = Awaited<ReturnType<typeof getUserProfile>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserProfile>>,
          TError,
          Awaited<ReturnType<typeof getUserProfile>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserProfile<
  TData = Awaited<ReturnType<typeof getUserProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserProfile>>,
          TError,
          Awaited<ReturnType<typeof getUserProfile>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserProfile<
  TData = Awaited<ReturnType<typeof getUserProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetUserProfile<
  TData = Awaited<ReturnType<typeof getUserProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUserProfileQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateUserProfile = (
  updateProfileRequest: UpdateProfileRequest,
) => {
  return apiClient<UserProfileResponse>({
    url: `/profile`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: updateProfileRequest,
  });
};

export const getUpdateUserProfileMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserProfile>>,
    TError,
    { data: UpdateProfileRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUserProfile>>,
  TError,
  { data: UpdateProfileRequest },
  TContext
> => {
  const mutationKey = ["updateUserProfile"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUserProfile>>,
    { data: UpdateProfileRequest }
  > = (props) => {
    const { data } = props ?? {};

    return updateUserProfile(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateUserProfileMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUserProfile>>
>;
export type UpdateUserProfileMutationBody = UpdateProfileRequest;
export type UpdateUserProfileMutationError = unknown;

export const useUpdateUserProfile = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateUserProfile>>,
      TError,
      { data: UpdateProfileRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateUserProfile>>,
  TError,
  { data: UpdateProfileRequest },
  TContext
> => {
  const mutationOptions = getUpdateUserProfileMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteUserProfile = () => {
  return apiClient<void>({ url: `/profile`, method: "DELETE" });
};

export const getDeleteUserProfileMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUserProfile>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteUserProfile>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["deleteUserProfile"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteUserProfile>>,
    void
  > = () => {
    return deleteUserProfile();
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteUserProfileMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteUserProfile>>
>;

export type DeleteUserProfileMutationError = unknown;

export const useDeleteUserProfile = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteUserProfile>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteUserProfile>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getDeleteUserProfileMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const changePassword = (
  changePasswordRequest: ChangePasswordRequest,
  signal?: AbortSignal,
) => {
  return apiClient<void>({
    url: `/profile/change-password`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: changePasswordRequest,
    signal,
  });
};

export const getChangePasswordMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof changePassword>>,
    TError,
    { data: ChangePasswordRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof changePassword>>,
  TError,
  { data: ChangePasswordRequest },
  TContext
> => {
  const mutationKey = ["changePassword"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof changePassword>>,
    { data: ChangePasswordRequest }
  > = (props) => {
    const { data } = props ?? {};

    return changePassword(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ChangePasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof changePassword>>
>;
export type ChangePasswordMutationBody = ChangePasswordRequest;
export type ChangePasswordMutationError = unknown;

export const useChangePassword = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof changePassword>>,
      TError,
      { data: ChangePasswordRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof changePassword>>,
  TError,
  { data: ChangePasswordRequest },
  TContext
> => {
  const mutationOptions = getChangePasswordMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
