/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CategoryRequest,
  CategoryResponse,
} from "../openAPIDefinition.schemas";

import { apiClient } from "../../../api-client";

export const getCategoryById = (id: string, signal?: AbortSignal) => {
  return apiClient<CategoryResponse>({
    url: `/categories/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetCategoryByIdQueryKey = (id: string) => {
  return [`/categories/${id}`] as const;
};

export const getGetCategoryByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getCategoryById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCategoryById>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCategoryByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategoryById>>> = ({
    signal,
  }) => getCategoryById(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCategoryById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCategoryByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCategoryById>>
>;
export type GetCategoryByIdQueryError = unknown;

export function useGetCategoryById<
  TData = Awaited<ReturnType<typeof getCategoryById>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCategoryById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoryById>>,
          TError,
          Awaited<ReturnType<typeof getCategoryById>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCategoryById<
  TData = Awaited<ReturnType<typeof getCategoryById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCategoryById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoryById>>,
          TError,
          Awaited<ReturnType<typeof getCategoryById>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCategoryById<
  TData = Awaited<ReturnType<typeof getCategoryById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCategoryById>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetCategoryById<
  TData = Awaited<ReturnType<typeof getCategoryById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCategoryById>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCategoryByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateCategory = (
  id: string,
  categoryRequest: CategoryRequest,
) => {
  return apiClient<CategoryResponse>({
    url: `/categories/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: categoryRequest,
  });
};

export const getUpdateCategoryMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCategory>>,
    TError,
    { id: string; data: CategoryRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCategory>>,
  TError,
  { id: string; data: CategoryRequest },
  TContext
> => {
  const mutationKey = ["updateCategory"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCategory>>,
    { id: string; data: CategoryRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateCategory(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateCategory>>
>;
export type UpdateCategoryMutationBody = CategoryRequest;
export type UpdateCategoryMutationError = unknown;

export const useUpdateCategory = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateCategory>>,
      TError,
      { id: string; data: CategoryRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateCategory>>,
  TError,
  { id: string; data: CategoryRequest },
  TContext
> => {
  const mutationOptions = getUpdateCategoryMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteCategory = (id: string) => {
  return apiClient<void>({ url: `/categories/${id}`, method: "DELETE" });
};

export const getDeleteCategoryMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCategory>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCategory>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteCategory"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCategory>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteCategory(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCategory>>
>;

export type DeleteCategoryMutationError = unknown;

export const useDeleteCategory = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteCategory>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteCategory>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteCategoryMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getAllUserCategories = (signal?: AbortSignal) => {
  return apiClient<CategoryResponse[]>({
    url: `/categories`,
    method: "GET",
    signal,
  });
};

export const getGetAllUserCategoriesQueryKey = () => {
  return [`/categories`] as const;
};

export const getGetAllUserCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllUserCategories>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getAllUserCategories>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllUserCategoriesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAllUserCategories>>
  > = ({ signal }) => getAllUserCategories(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllUserCategories>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllUserCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllUserCategories>>
>;
export type GetAllUserCategoriesQueryError = unknown;

export function useGetAllUserCategories<
  TData = Awaited<ReturnType<typeof getAllUserCategories>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllUserCategories>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllUserCategories>>,
          TError,
          Awaited<ReturnType<typeof getAllUserCategories>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllUserCategories<
  TData = Awaited<ReturnType<typeof getAllUserCategories>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllUserCategories>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllUserCategories>>,
          TError,
          Awaited<ReturnType<typeof getAllUserCategories>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllUserCategories<
  TData = Awaited<ReturnType<typeof getAllUserCategories>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllUserCategories>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetAllUserCategories<
  TData = Awaited<ReturnType<typeof getAllUserCategories>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllUserCategories>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAllUserCategoriesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createCategory = (
  categoryRequest: CategoryRequest,
  signal?: AbortSignal,
) => {
  return apiClient<CategoryResponse>({
    url: `/categories`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: categoryRequest,
    signal,
  });
};

export const getCreateCategoryMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCategory>>,
    TError,
    { data: CategoryRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createCategory>>,
  TError,
  { data: CategoryRequest },
  TContext
> => {
  const mutationKey = ["createCategory"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createCategory>>,
    { data: CategoryRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createCategory(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof createCategory>>
>;
export type CreateCategoryMutationBody = CategoryRequest;
export type CreateCategoryMutationError = unknown;

export const useCreateCategory = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createCategory>>,
      TError,
      { data: CategoryRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createCategory>>,
  TError,
  { data: CategoryRequest },
  TContext
> => {
  const mutationOptions = getCreateCategoryMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
